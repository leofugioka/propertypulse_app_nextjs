// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_MONGODB_URI")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  bookmarks     Bookmark[]
  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  // Messages sent by the user
  sentMessages Message[] @relation("UserSentMessages")
  // Messages received by the user
  receivedMessages Message[] @relation("UserReceivedMessages")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

type Location {
  street String
  city String
  state String
  zipcode String
}

type Rates {
  nightly  Float?
  weekly   Float?
  monthly  Float?
}

type SellerInfo {
  name  String
  email String
  phone String
}

model Property {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  owner       String     @db.ObjectId
  name        String
  type        String
  description String
  location    Location
  full_address String?
  beds        Int
  baths       Int
  square_feet Int
  amenities   String[]
  rates       Rates
  seller_info SellerInfo
  images      String[]
  is_featured Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [owner], references: [id], onDelete: Cascade)
  bookmarkedBy Bookmark[]
  messages Message[]
}

model Bookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  propertyId String @db.ObjectId
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  @@unique([userId, propertyId])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  recipientId String @db.ObjectId
  propertyId String @db.ObjectId
  name String
  email String
  phone String?
  message String
  read Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to sender
  sender User @relation("UserSentMessages", fields: [userId], references: [id], onDelete: Cascade)
  // Relation to recipient
  recipient User @relation("UserReceivedMessages",fields: [recipientId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}